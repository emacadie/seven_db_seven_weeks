As root, install postgresql-contrib

sudo -u postgres psql postgres
postgres=# create database book with owner ericm;
postgres=# grant all privileges on database book to ericm;
To make the extensions:
sudo -u postgres psql book -c "CREATE EXTENSION cube"
sudo -u postgres psql book -c "CREATE EXTENSION tablefunc"
sudo -u postgres psql book -c "CREATE EXTENSION dict_xsyn"
sudo -u postgres psql book -c "CREATE EXTENSION fuzzystrmatch"
sudo -u postgres psql book -c "CREATE EXTENSION pg_trgm"

I can run this as myself: 
psql book -c "SELECT '1'::cube;"

And do this to get to the db:
psql book

CREATE TABLE countries (
  country_code char(2) PRIMARY KEY,
  country_name text UNIQUE
);

This gives the output:
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "countries_pkey" for table "countries"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "countries_country_name_key" for table "countries"
CREATE TABLE

INSERT INTO countries (country_code, country_name)
VALUES ('us','United States'), ('mx','Mexico'), ('au','Australia'),
('gb','United Kingdom'), ('de','Germany'), ('ll','Loompaland');

The output for that was:
INSERT 0 6
(I inserted 6 rows. What is the "?")

SELECT * FROM countries;
DELETE FROM countries WHERE country_code = 'll';
The output for that was
DELETE 1

CREATE TABLE cities (
  name text NOT NULL,
  postal_code varchar(9) CHECK (postal_code <> ''),
  country_code char(2) REFERENCES countries,
  PRIMARY KEY (country_code, postal_code)
);

book=> CREATE TABLE cities (
book(>   name text NOT NULL,
book(>   postal_code varchar(9) CHECK (postal_code <> ''),
book(>   country_code char(2) REFERENCES countries,
book(>   PRIMARY KEY (country_code, postal_code)
book(> );
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "cities_pkey" for table "cities"
CREATE TABLE
book=> \h
book=> INSERT INTO cities
book-> VALUES ('Toronto','M4C1B5','ca');
ERROR:  insert or update on table "cities" violates foreign key constraint "cities_country_code_fkey"
DETAIL:  Key (country_code)=(ca) is not present in table "countries".

book=> UPDATE cities
book-> SET postal_code = '97205'
book-> WHERE name = 'Portland';
UPDATE 1

SELECT cities.*, country_name
FROM cities INNER JOIN countries
ON cities.country_code = countries.country_code;

Here is a new one:
CREATE TABLE venues (
  venue_id SERIAL PRIMARY KEY,
  name varchar(255),
  street_address text,
  type char(7) CHECK ( type in ('public','private') ) DEFAULT 'public',
  postal_code varchar(9),
  country_code char(2),
  FOREIGN KEY (country_code, postal_code)
  REFERENCES cities (country_code, postal_code) MATCH FULL
);
NOTICE:  CREATE TABLE will create implicit sequence "venues_venue_id_seq" for serial column "venues.venue_id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "venues_pkey" for table "venues"
CREATE TABLE

The check constraint is like an enum in MySQL. It must be one of the values provided. Is that in PostGres or one of the extensions?
Actually, look up "CHECK"

"SERIAL" is like "integer auto increment" in MySQL

INSERT INTO venues (name, postal_code, country_code)
VALUES ('Crystal Ballroom', '97205', 'us');

SELECT v.venue_id, v.name, c.name
FROM venues v INNER JOIN cities c
ON v.postal_code=c.postal_code AND v.country_code=c.country_code;

INSERT INTO venues (name, postal_code, country_code)
VALUES ('Voodoo Donuts', '97205', 'us') RETURNING venue_id;

In MySQL, you would do "desc table venues"
In Postgres, it's "\d+ venues"

CREATE TABLE events (
  event_id SERIAL PRIMARY KEY,
  title varchar(255),
  starts timestamp, 
  ends timestamp,
  venue_id integer REFERENCES venues
  
);

book=> CREATE TABLE events (
book(>   event_id SERIAL PRIMARY KEY,
book(>   title varchar(255),
book(>   starts timestamp,
book(>   ends timestamp,
book(>   venue_id integer REFERENCES venues
book(> 
book(> );
NOTICE:  CREATE TABLE will create implicit sequence "events_event_id_seq" for serial column "events.event_id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "events_pkey" for table "events"
CREATE TABLE


insert into events (title, starts, ends, venue_id)
values ('LARP Club', '2012-02-15 17:30', '2012-02-15 19:30', 2);
insert into events (title, starts, ends)
values ('April Fools Day', '2012-04-01 00:00', '2012-04-01 23:59');
insert into events (title, starts, ends)
values ('Christmas Day', '2012-12-25 00:00', '2012-12-25 23:59');

SELECT e.title, v.name
FROM events e JOIN venues v
ON e.venue_id = v.venue_id;

(same as inner join)

SELECT e.title, v.name
FROM events e LEFT JOIN venues v
ON e.venue_id = v.venue_id;

Using the "unique" keyword when creating a field also creates an index

You can also do this:
CREATE INDEX events_title
ON events USING hash (title);

Index for less-than, greater-than, equal-to, use b-tree
CREATE INDEX events_starts
ON events USING btree (starts);

The pg_class query to get the tables:
select * from pg_class where relnamespace = 2200 and not(relfrozenxid = 0);

alter table venues add column active boolean default true

select events.title, venues.country_code from events inner join venues on events.venue_id = venues.venue_id;
----
Day 2

INSERT INTO events (title, starts, ends, venue_id)
VALUES ('Moby', '2012-02-06 21:00', '2012-02-06 23:00', (
SELECT venue_id
FROM venues
WHERE name = 'Crystal Ballroom'
)
);

INSERT INTO events (title, starts, ends, venue_id)
values ('Wedding', '2012-02-26 21:00:00', '2012-02-26 23:00:00', 
(select venue_id from venues where name = 'Voodoo Donuts')),
('Dinner with Mom', '2012-02-26 18:00:00', '2012-02-26 20:30:00',
(select venue_id from venues where name = 'My Place')),
('Valentine''s Day', '2012-02-14 00:00:00', '2012-02-14 23:59:00', null);

SELECT count(title)
FROM events
WHERE title LIKE '%Day%';

SELECT min(starts), max(ends)
FROM events INNER JOIN venues
ON events.venue_id = venues.venue_id
WHERE venues.name = 'Crystal Ballroom';

SELECT venue_id, count(*)
FROM events
GROUP BY venue_id;

SELECT venue_id
FROM events
GROUP BY venue_id
HAVING count(*) >= 2 AND venue_id IS NOT NULL;

SELECT venue_id FROM events GROUP BY venue_id;

SELECT DISTINCT venue_id FROM events;

SELECT title, count(*) OVER (PARTITION BY venue_id) FROM events;
Not quite getting Window functions

BEGIN TRANSACTION;
DELETE FROM events;
ROLLBACK;
SELECT * FROM events;

BEGIN TRANSACTION;
UPDATE account SET total=total+5000.0 WHERE account_id=1337;
UPDATE account SET total=total-5000.0 WHERE account_id=45887;
END;

look at the file add_event.sql
SELECT add_event('House Party', '2012-05-03 23:00',
'2012-05-04 02:00', 'Run''s House', '97205', 'us');

Run this command outside the db:
createlang book --list

CREATE TABLE logs (
event_id integer,
old_title varchar(255),
old_starts timestamp,
old_ends timestamp,
logged_at timestamp DEFAULT current_timestamp
);

CREATE TRIGGER log_events
AFTER UPDATE ON events
FOR EACH ROW EXECUTE PROCEDURE log_event();

ALTER TABLE events
ADD colors text ARRAY;

Add a view:
CREATE OR REPLACE VIEW holidays AS
SELECT event_id AS holiday_id, title AS name, starts AS date, colors
FROM events
WHERE title LIKE '%Day%' AND venue_id IS NULL;

UPDATE holidays SET colors = '{"red","green"}' where name = 'Christmas Day';

left off page 31, rules
EXPLAIN VERBOSE
SELECT *
FROM holidays;

This is the query that created the view:
EXPLAIN VERBOSE
SELECT event_id AS holiday_id,
title AS name, starts AS date, colors
FROM events
WHERE title LIKE '%Day%' AND venue_id IS NULL;

CREATE RULE update_holidays AS ON UPDATE TO holidays DO INSTEAD
UPDATE events
SET title = NEW.name,
starts = NEW.date,
colors = NEW.colors
WHERE title = OLD.name;

UPDATE holidays SET colors = '{"red","green"}' where name = 'Christmas Day';

This is what works:
create rule delete_holidays as on delete to holidays do instead
delete from events 
where title = old.name;
delete from events where title = 'Wedding 01 Day';

SELECT extract(year from starts) as year,
extract(month from starts) as month, count(*)
FROM events
GROUP BY year, month;

CREATE TEMPORARY TABLE month_count(month INT);
INSERT INTO month_count VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12);

SELECT * FROM crosstab(
'SELECT extract(year from starts) as year,
extract(month from starts) as month, count(*)
FROM events
GROUP BY year, month',
'SELECT * FROM month_count'
) AS (
year int,
jan int, feb int, mar int, apr int, may int, jun int,
jul int, aug int, sep int, oct int, nov int, dec int
) ORDER BY YEAR;

insert into month_count values (generate_series(13,19));

INSERT INTO venues (name, postal_code, country_code)
VALUES ('Terris Place', '78753', 'us');

delete from venues where name = 'Terri''s Place';

CREATE RULE update_holidays AS ON UPDATE TO holidays DO INSTEAD
UPDATE events
SET title = NEW.name,
starts = NEW.date,
colors = NEW.colors
WHERE title = OLD.name;

select * from pg_rules;

create rule delete_venues_001 as on delete to venues do instead
update venues
set active=false
where name = old.name;

Left off page 34
-----------------------------------------------
psql --host=localhost --port=5432 --username=ericm --dbname=book --file=create_movies.sql
psql --host=localhost --port=5432 --username=ericm --dbname=book --file=movies_data.sql

Postgres has ilike which is case-insensitive like

SELECT title FROM movies WHERE title ILIKE 'stardust%';

~ starts reg ex, and ! negates. * is case-insensitivity
SELECT COUNT(*) FROM movies WHERE title !~* '^the.*';

CREATE INDEX movies_title_pattern ON movies (lower(title) text_pattern_ops);
*pattern_ops creates an index that is really good at searching regular expressions
text, varchar, a few others

SELECT levenshtein('bat', 'fads');
levenshtein calculates how many changes are needed to transform one string into another.

SELECT levenshtein('bat', 'fad') fad,
levenshtein('bat', 'fat') fat,
levenshtein('bat', 'bat') bat;

SELECT movie_id, title FROM movies
WHERE levenshtein(lower(title), lower('a hard day nght')) <= 3;

Break a string into as many 3-character combos as you can. These are called trigrams.
book=> SELECT show_trgm('Avatar');
              show_trgm              
-------------------------------------
 {"  a"," av","ar ",ata,ava,tar,vat}
(1 row)

We’ll create a trigram index against movie names to start (we use Generalized
Index Search Tree [GIST], a generic index API made available by the PostgreSQL
engine).
CREATE INDEX movies_title_trigram ON movies
USING gist (title gist_trgm_ops);

SELECT *
FROM movies
WHERE title % 'Avatre';
I guess % can substitute for like

No, it doesn't always work.

Here is another operator:
SELECT title
FROM movies
WHERE title @@ 'night & day';

"@@" is a full-text query operator

Some of their queries did not work:
book-> WHERE to_tsvector(title) @@ to_tsquery('english', 'night &amp; day');
ERROR:  syntax error in tsquery: "night &amp; day"
book=> SELECT to_tsvector('A Hard Day''s Night'), to_tsquery('english', 'night &amp; day');
ERROR:  syntax error in tsquery: "night &amp; day"
book=> SELECT to_tsvector('A Hard Day''s Night'), to_tsquery('english', 'night & day');
        to_tsvector         |   to_tsquery    
----------------------------+-----------------
 'day':3 'hard':2 'night':5 | 'night' & 'day'
(1 row)

EXPLAIN
SELECT *
FROM movies
WHERE title @@ 'night & day';

book=> EXPLAIN
book-> SELECT *
book-> FROM movies
book-> WHERE title @@ 'night & day';
                        QUERY PLAN                        
----------------------------------------------------------
 Seq Scan on movies  (cost=0.00..175.07 rows=3 width=315)
   Filter: (title @@ 'night & day'::text)
(2 rows)

"Seq Scan on movies" means it is doing a full scan on movies.

So create an index:
CREATE INDEX movies_title_searchable ON movies
USING gin(to_tsvector('english', title));

To use the index, do this query:
EXPLAIN
SELECT *
FROM movies
WHERE to_tsvector('english',title) @@ 'night & day';
(because the index specifies English)

                                           QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on movies  (cost=20.00..24.02 rows=1 width=315)
   Recheck Cond: (to_tsvector('english'::regconfig, title) @@ '''night'' & ''day'''::tsquery)
   ->  Bitmap Index Scan on movies_title_searchable  (cost=0.00..20.00 rows=1 width=0)
         Index Cond: (to_tsvector('english'::regconfig, title) @@ '''night'' & ''day'''::tsquery)

I assume that "Bitmap Heap Scan" is better.

Use "EXPLAIN" to ensure that indexes are used.

There is a chapter on text search: http://www.postgresql.org/docs/9.2/static/textsearch.html 

Left off page 43

#- EOF
